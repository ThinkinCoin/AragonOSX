{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "implementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_dao",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "prepareInstallation",
				"outputs": [
					{
						"internalType": "address",
						"name": "plugin",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "address[]",
								"name": "helpers",
								"type": "address[]"
							},
							{
								"components": [
									{
										"internalType": "enum PermissionLib.Operation",
										"name": "operation",
										"type": "uint8"
									},
									{
										"internalType": "address",
										"name": "where",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "who",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "condition",
										"type": "address"
									},
									{
										"internalType": "bytes32",
										"name": "permissionId",
										"type": "bytes32"
									}
								],
								"internalType": "struct PermissionLib.MultiTargetPermission[]",
								"name": "permissions",
								"type": "tuple[]"
							}
						],
						"internalType": "struct IPluginSetup.PreparedSetupData",
						"name": "preparedSetupData",
						"type": "tuple"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_dao",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "plugin",
								"type": "address"
							},
							{
								"internalType": "address[]",
								"name": "currentHelpers",
								"type": "address[]"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct IPluginSetup.SetupPayload",
						"name": "_payload",
						"type": "tuple"
					}
				],
				"name": "prepareUninstallation",
				"outputs": [
					{
						"components": [
							{
								"internalType": "enum PermissionLib.Operation",
								"name": "operation",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "where",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "who",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "condition",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "permissionId",
								"type": "bytes32"
							}
						],
						"internalType": "struct PermissionLib.MultiTargetPermission[]",
						"name": "permissions",
						"type": "tuple[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_dao",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "_currentBuild",
						"type": "uint16"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "plugin",
								"type": "address"
							},
							{
								"internalType": "address[]",
								"name": "currentHelpers",
								"type": "address[]"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct IPluginSetup.SetupPayload",
						"name": "_payload",
						"type": "tuple"
					}
				],
				"name": "prepareUpdate",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "initData",
						"type": "bytes"
					},
					{
						"components": [
							{
								"internalType": "address[]",
								"name": "helpers",
								"type": "address[]"
							},
							{
								"components": [
									{
										"internalType": "enum PermissionLib.Operation",
										"name": "operation",
										"type": "uint8"
									},
									{
										"internalType": "address",
										"name": "where",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "who",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "condition",
										"type": "address"
									},
									{
										"internalType": "bytes32",
										"name": "permissionId",
										"type": "bytes32"
									}
								],
								"internalType": "struct PermissionLib.MultiTargetPermission[]",
								"name": "permissions",
								"type": "tuple[]"
							}
						],
						"internalType": "struct IPluginSetup.PreparedSetupData",
						"name": "preparedSetupData",
						"type": "tuple"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "protocolVersion",
				"outputs": [
					{
						"internalType": "uint8[3]",
						"name": "",
						"type": "uint8[3]"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "_interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Aragon Association - 2022-2023",
			"custom:security-contact": "sirt@aragon.org",
			"kind": "dev",
			"methods": {
				"implementation()": {
					"details": "The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).",
					"returns": {
						"_0": "The address of the plugin implementation contract."
					}
				},
				"prepareInstallation(address,bytes)": {
					"params": {
						"_dao": "The address of the installing DAO.",
						"_data": "The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file."
					},
					"returns": {
						"plugin": "The address of the `Plugin` contract being prepared for installation.",
						"preparedSetupData": "The deployed plugin's relevant data which consists of helpers and permissions."
					}
				},
				"prepareUninstallation(address,(address,address[],bytes))": {
					"params": {
						"_dao": "The address of the uninstalling DAO.",
						"_payload": "The relevant data necessary for the `prepareUninstallation`. See above."
					},
					"returns": {
						"permissions": "The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO."
					}
				},
				"prepareUpdate(address,uint16,(address,address[],bytes))": {
					"params": {
						"_currentBuild": "The build number of the plugin to update from.",
						"_dao": "The address of the updating DAO.",
						"_payload": "The relevant data necessary for the `prepareUpdate`. See above."
					},
					"returns": {
						"initData": "The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.",
						"preparedSetupData": "The deployed plugin's relevant data which consists of helpers and permissions."
					}
				},
				"protocolVersion()": {
					"details": "This version number is not to be confused with the `release` and `build` numbers found in the `Version.Tag` struct inside the `PluginRepo` contract being used to version plugin setup and associated plugin implementation contracts.",
					"returns": {
						"_0": "Returns the semantic Aragon OSx protocol version number."
					}
				},
				"supportsInterface(bytes4)": {
					"params": {
						"_interfaceId": "The ID of the interface."
					},
					"returns": {
						"_0": "Returns `true` if the interface is supported."
					}
				}
			},
			"title": "PluginSetup",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"implementation()": {
					"notice": "Returns the plugin implementation address."
				},
				"prepareInstallation(address,bytes)": {
					"notice": "Prepares the installation of a plugin."
				},
				"prepareUninstallation(address,(address,address[],bytes))": {
					"notice": "Prepares the uninstallation of a plugin."
				},
				"prepareUpdate(address,uint16,(address,address[],bytes))": {
					"notice": "Prepares the update of a plugin."
				},
				"protocolVersion()": {
					"notice": "Returns the semantic Aragon OSx protocol version number that the implementing contract is associated with."
				},
				"supportsInterface(bytes4)": {
					"notice": "Checks if this or the parent contract supports an interface by its ID."
				}
			},
			"notice": "An abstract contract that developers have to inherit from to write the setup of a plugin.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"packages/contracts/src/framework/plugin/setup/PluginSetup.sol": "PluginSetup"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"https://raw.githubusercontent.com/mzfshark/openzeppelin-contracts/release-v4.9/contracts/interfaces/IERC1967.sol": {
			"keccak256": "0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90",
			"license": "MIT",
			"urls": [
				"bzz-raw://e8fa670c3bdce78e642cc6ae11c4cb38b133499cdce5e1990a9979d424703263",
				"dweb:/ipfs/QmVxeCUk4jL2pXQyhsoNJwyU874wRufS2WvGe8TgPKPqhE"
			]
		},
		"https://raw.githubusercontent.com/mzfshark/openzeppelin-contracts/release-v4.9/contracts/interfaces/draft-IERC1822.sol": {
			"keccak256": "0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff",
			"license": "MIT",
			"urls": [
				"bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688",
				"dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr"
			]
		},
		"https://raw.githubusercontent.com/mzfshark/openzeppelin-contracts/release-v4.9/contracts/proxy/Clones.sol": {
			"keccak256": "0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999",
			"license": "MIT",
			"urls": [
				"bzz-raw://e1306add0c9388918d04c45f6acae3551f019ebf8a77e6cc1c0958316ce1c1eb",
				"dweb:/ipfs/QmR4KHkcfP65RfZtH8TcC7rSdCoWk2Dnog6fhzzjLad8Aa"
			]
		},
		"https://raw.githubusercontent.com/mzfshark/openzeppelin-contracts/release-v4.9/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
			"keccak256": "0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d",
			"license": "MIT",
			"urls": [
				"bzz-raw://96b6d77a20bebd4eb06b801d3d020c7e82be13bd535cb0d0a6b7181c51dab5d5",
				"dweb:/ipfs/QmPUR9Cv9jNFdQX6PtBfaBW1ZCnKwiu65R2VD5kbdanDyn"
			]
		},
		"https://raw.githubusercontent.com/mzfshark/openzeppelin-contracts/release-v4.9/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
			"keccak256": "0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2",
			"license": "MIT",
			"urls": [
				"bzz-raw://2db8e18505e86e02526847005d7287a33e397ed7fb9eaba3fd4a4a197add16e2",
				"dweb:/ipfs/QmW9BSuKTzHWHBNSHF4L8XfVuU1uJrP2vLg84YtBd8mL82"
			]
		},
		"https://raw.githubusercontent.com/mzfshark/openzeppelin-contracts/release-v4.9/contracts/proxy/Proxy.sol": {
			"keccak256": "0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27",
			"license": "MIT",
			"urls": [
				"bzz-raw://8831721b6f4cc26534d190f9f1631c3f59c9ff38efdd911f85e0882b8e360472",
				"dweb:/ipfs/QmQZnLErZNStirSQ13ZNWQgvEYUtGE5tXYwn4QUPaVUfPN"
			]
		},
		"https://raw.githubusercontent.com/mzfshark/openzeppelin-contracts/release-v4.9/contracts/proxy/beacon/IBeacon.sol": {
			"keccak256": "0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61",
			"license": "MIT",
			"urls": [
				"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354",
				"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce"
			]
		},
		"https://raw.githubusercontent.com/mzfshark/openzeppelin-contracts/release-v4.9/contracts/utils/Address.sol": {
			"keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
				"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
			]
		},
		"https://raw.githubusercontent.com/mzfshark/openzeppelin-contracts/release-v4.9/contracts/utils/StorageSlot.sol": {
			"keccak256": "0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899",
			"license": "MIT",
			"urls": [
				"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da",
				"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q"
			]
		},
		"https://raw.githubusercontent.com/mzfshark/openzeppelin-contracts/release-v4.9/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"https://raw.githubusercontent.com/mzfshark/openzeppelin-contracts/release-v4.9/contracts/utils/introspection/ERC165Checker.sol": {
			"keccak256": "0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f7bb74cf88fd88daa34e118bc6e363381d05044f34f391d39a10c0c9dac3ebd",
				"dweb:/ipfs/QmNbQ3v8v4zuDtg7VeLAbdhAm3tCzUodNoDZZ8ekmCHWZX"
			]
		},
		"https://raw.githubusercontent.com/mzfshark/openzeppelin-contracts/release-v4.9/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"packages/contracts/src/core/dao/IDAO.sol": {
			"keccak256": "0x9d45c336c22ef5b7873b31d9d56944f683219127007426bdfa27df5450e15fc0",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://0a0165610147542743bcdc1f4eb38501312768a394e255e53e1a4b8d374d039b",
				"dweb:/ipfs/QmfCvVeH6oCs1yUyGwsV6vLF4JtDR2sUL6MVkhQiSvq45R"
			]
		},
		"packages/contracts/src/core/permission/PermissionLib.sol": {
			"keccak256": "0x768b09a4f4c981870791fabda8acfb2d6eb2787cbfb1dd04053565fe8b0e1092",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://be4dfe12c308a1246dba388cde67e8cd25ad4d4d2e1a1e305ab47451a296d24b",
				"dweb:/ipfs/QmW9V14fFYPKKzZjSp99LqxDZHKDKHK3PEx8A7X2adoMWx"
			]
		},
		"packages/contracts/src/framework/plugin/setup/IPluginSetup.sol": {
			"keccak256": "0x7142c50653843dc138e426f9315bfa4019169d3d4ccaabf81440d0beb0241934",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://4233504e7dbb0efbb30f9333a031f947521d21d41a48715dee3831ecb1fa322b",
				"dweb:/ipfs/QmWDUYBQ8uRSZu5ZQn9SrhcrSnMdQXQF4DNk1HccSpczYD"
			]
		},
		"packages/contracts/src/framework/plugin/setup/PluginSetup.sol": {
			"keccak256": "0x93fecd28a4ed8ce6e2cde708d335206808b718599f95268942a72b83bba0182b",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://a9cc18290fbc6e9b2e2e4f36e5f769f273c650b43c8c9f05b11e2c38cf48e618",
				"dweb:/ipfs/QmSSe1enTzB1WfAr9eq68PmzSWE9HsmsLEsyEPYBXQzVoC"
			]
		},
		"packages/contracts/src/utils/Proxy.sol": {
			"keccak256": "0x91309796e1542436aedf49cbe173a8e8ead37f3b74a1850125f48f97593fd108",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://2adf7506785bef4888e76ae2e808c878bf3e7da362d6a4c182b94ea7a446983a",
				"dweb:/ipfs/QmbeXXB1QzHfMcc5DLLf54bKYcbbqg58ASHpafFh4QA9hC"
			]
		},
		"packages/contracts/src/utils/protocol/IProtocolVersion.sol": {
			"keccak256": "0xd8fc65ec43ce98d036777a945bb3aec34fa96102cb07cc3e347b433e7550d879",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://4f19eb36baedd257e7762902894f447636f51d4df882fafc80b8e111a7d7fa9a",
				"dweb:/ipfs/QmPB8wKS6eEJfn7Zn78KNpMwAdDgjSxjrodbfHMdjHNZYv"
			]
		},
		"packages/contracts/src/utils/protocol/ProtocolVersion.sol": {
			"keccak256": "0x53e693a16bda9b3483ce71a5b25a523961930c3f03ec381d9da0be9d37686599",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://48336778e4f2097ff1fb1c4909d2be7a50dd6107f1c31c69aebb41e6162ef0e2",
				"dweb:/ipfs/QmNTEmpC3arZ5PPq7HX5SRwe9SNL5kLwnmG9zPfUkbi63B"
			]
		}
	},
	"version": 1
}